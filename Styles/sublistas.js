// Sublistas

// Crear un programa que permita agregar listas de tareas y agruparlas en categorias. El programa debe hacer lo siguiente:
// Permitir ingresar el nombre de una categorÃ­a
// Permitir ingresar una tarea
// Preguntar si desea ingresar otra tarea
// Si responde que si, volver al punto 2
// Si responde que no, preguntar si desea ingresar otra categorÃ­a
// Si responde que sÃ­, volver al punto 1
// Si responde que no, terminar el programa En todo momento (en cada mensaje), el programa debe mostrar las tareas agrupadas por categorÃ­as. Las categorÃ­as deben diferenciarse de las tareas (se pueden usar divisores, emojis, espacios, etc). Ejemplo:
// Lista de Tareas

// SUPERMERCADO
// ----------------------
// ğŸ‘‰ Comprar harina
// ğŸ‘‰ Comprar gaseosa
// ğŸ‘‰ Comprar aceite

// FACULTAD
// ----------------------
// ğŸ‘‰ Sacar apuntes
// ğŸ‘‰ Anotarse para final

// MICHI
// ----------------------
// ğŸ‘‰ Comprar comida
// ğŸ‘‰ Llevar a veterinaria 


let listasTareas =[];
let categoria =(`Este es su block de notas. Vamos a comenzar!
Agregue una categorÃ­a`);
const tarea =(`Â¿QuÃ© tarea desea agregar?`);
let terminarPrograma=true;
let mensajeCategoria ="";
let mensajeFinal ="";

while (terminarPrograma) {   
    let nuevaCategoria=prompt(categoria)
    if (nuevaCategoria){
        mensajeCategoria=nuevaCategoria + `\n`+`________________`;  
}
let agregoTarea=true; // acÃ¡ para q el bucle tenga final
let mensajeTarea =""; // para que no me sume tareas a todas las categorÃ­as
    while(agregoTarea){
        nuevaTarea =prompt(tarea)
        agregoTarea= confirm(`Â¿Desea agregar una nueva tarea?`)
        mensajeTarea+=nuevaTarea + `\n`;  
    }   
    mensajeFinal+=`________________`+ `\n`+ nuevaCategoria +`\n`  + `________________`+`\n` + mensajeTarea;
    alert(mensajeFinal)
    terminarPrograma=confirm(`Â¿Desea agregar nueva categorÃ­a?`) 
}

alert(`Gracias! nos vemos luego`)